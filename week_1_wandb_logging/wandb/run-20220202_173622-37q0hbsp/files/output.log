Some weights of the model checkpoint at google/bert_uncased_L-2_H-128_A-2 were not used when initializing BertForSequenceClassification: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight', 'cls.predictions.decoder.bias', 'cls.seq_relationship.weight', 'cls.seq_relationship.bias']
- This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of BertForSequenceClassification were not initialized from the model checkpoint at google/bert_uncased_L-2_H-128_A-2 and are newly initialized: ['classifier.weight', 'classifier.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
GPU available: False, used: False
TPU available: False, using: 0 TPU cores
Reusing dataset glue (/home/yogender/.cache/huggingface/datasets/glue/cola/1.0.0/dacbe3125aa31d7f70367a07a8a9e72a5a0bfeb5fc42e75c9db75b96da6053ad)
Parameter 'function'=<bound method DataModule.tokenize_data of <data.DataModule object at 0x7f1808e8f670>> of the transform datasets.arrow_dataset.Dataset._map_single couldn't be hashed properly, a random hash was used instead. Make sure your transforms and parameters are serializable with pickle or dill for the dataset fingerprinting and caching to work. If you reuse this transform, the caching mechanism will consider it to be different from the previous calls and recompute everything. This warning is only showed once. Subsequent hashing failures won't be showed.
 33%|███████████████████████████████████████                                                                              | 3/9 [00:00<00:00, 27.30ba/s]
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:00<00:00, 24.50ba/s]
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 39.37ba/s]
  | Name                   | Type                          | Params
-------------------------------------------------------------------------
0 | bert                   | BertForSequenceClassification | 4.4 M
1 | train_accuracy_metric  | Accuracy                      | 0
2 | val_accuracy_metric    | Accuracy                      | 0
3 | f1_metric              | F1                            | 0
4 | precision_macro_metric | Precision                     | 0
5 | recall_macro_metric    | Recall                        | 0
6 | precision_micro_metric | Precision                     | 0
7 | recall_micro_metric    | Recall                        | 0
-------------------------------------------------------------------------
4.4 M     Trainable params
0         Non-trainable params
4.4 M     Total params
17.545    Total estimated model params size (MB)
/home/yogender/miniconda3/envs/MLOps/lib/python3.8/site-packages/pytorch_lightning/utilities/distributed.py:68: UserWarning: The dataloader, val dataloader 0, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 8 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.

Epoch 0:   3%| | 5/151 [00:01<00:45,  3.22it/s, loss=0.682, v_num=hbsp, valid/loss_epoch=0.680, valid/acc=0.617, valid/precision_macro=0.520, valid/reca
/home/yogender/miniconda3/envs/MLOps/lib/python3.8/site-packages/pytorch_lightning/utilities/distributed.py:68: UserWarning: The dataloader, train dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 8 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.























Epoch 0:  94%|▉| 142/151 [00:49<00:03,  2.85it/s, loss=0.597, v_num=hbsp, valid/loss_epoch=0.680, valid/acc=0.617, valid/precision_macro=0.520, valid/re


Validating:  94%|████████████████████████████████████████████████████████████████████████████████████████████████▉      | 16/17 [00:02<00:00,  6.92it/s]